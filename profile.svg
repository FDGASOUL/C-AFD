<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1034" onload="init(evt)" viewBox="0 0 1200 1034" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = true;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1034" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">D:\anaconda\envs\C-AFD\Scripts\py-spy.exe record -o profile.svg -- python Config.py</text><text id="details" fill="rgb(0,0,0)" x="10" y="40.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1023.00"> </text><svg id="frames" x="10" width="1180" total_samples="5468"><g><title>&lt;module&gt; (pandas\core\groupby\generic.py:77) (6 samples, 0.11%)</title><rect x="0.0914%" y="644" width="0.1097%" height="15" fill="rgb(227,0,7)" fg:x="5" fg:w="6"/><text x="0.3414%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (6 samples, 0.11%)</title><rect x="0.0914%" y="660" width="0.1097%" height="15" fill="rgb(217,0,24)" fg:x="5" fg:w="6"/><text x="0.3414%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (6 samples, 0.11%)</title><rect x="0.0914%" y="676" width="0.1097%" height="15" fill="rgb(221,193,54)" fg:x="5" fg:w="6"/><text x="0.3414%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (6 samples, 0.11%)</title><rect x="0.0914%" y="692" width="0.1097%" height="15" fill="rgb(248,212,6)" fg:x="5" fg:w="6"/><text x="0.3414%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (6 samples, 0.11%)</title><rect x="0.0914%" y="708" width="0.1097%" height="15" fill="rgb(208,68,35)" fg:x="5" fg:w="6"/><text x="0.3414%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.11%)</title><rect x="0.0914%" y="724" width="0.1097%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="6"/><text x="0.3414%" y="734.50"></text></g><g><title>&lt;module&gt; (Cafd.py:2) (13 samples, 0.24%)</title><rect x="0.0000%" y="164" width="0.2377%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="13"/><text x="0.2500%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (13 samples, 0.24%)</title><rect x="0.0000%" y="180" width="0.2377%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="13"/><text x="0.2500%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (13 samples, 0.24%)</title><rect x="0.0000%" y="196" width="0.2377%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="13"/><text x="0.2500%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (13 samples, 0.24%)</title><rect x="0.0000%" y="212" width="0.2377%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="13"/><text x="0.2500%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (13 samples, 0.24%)</title><rect x="0.0000%" y="228" width="0.2377%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="13"/><text x="0.2500%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.24%)</title><rect x="0.0000%" y="244" width="0.2377%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="13"/><text x="0.2500%" y="254.50"></text></g><g><title>&lt;module&gt; (Sampler.py:6) (13 samples, 0.24%)</title><rect x="0.0000%" y="260" width="0.2377%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="13"/><text x="0.2500%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (13 samples, 0.24%)</title><rect x="0.0000%" y="276" width="0.2377%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="13"/><text x="0.2500%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (13 samples, 0.24%)</title><rect x="0.0000%" y="292" width="0.2377%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="13"/><text x="0.2500%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (13 samples, 0.24%)</title><rect x="0.0000%" y="308" width="0.2377%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="13"/><text x="0.2500%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (13 samples, 0.24%)</title><rect x="0.0000%" y="324" width="0.2377%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="13"/><text x="0.2500%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.24%)</title><rect x="0.0000%" y="340" width="0.2377%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="13"/><text x="0.2500%" y="350.50"></text></g><g><title>&lt;module&gt; (pandas\__init__.py:48) (10 samples, 0.18%)</title><rect x="0.0549%" y="356" width="0.1829%" height="15" fill="rgb(221,200,47)" fg:x="3" fg:w="10"/><text x="0.3049%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (10 samples, 0.18%)</title><rect x="0.0549%" y="372" width="0.1829%" height="15" fill="rgb(226,26,5)" fg:x="3" fg:w="10"/><text x="0.3049%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (10 samples, 0.18%)</title><rect x="0.0549%" y="388" width="0.1829%" height="15" fill="rgb(249,33,26)" fg:x="3" fg:w="10"/><text x="0.3049%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (10 samples, 0.18%)</title><rect x="0.0549%" y="404" width="0.1829%" height="15" fill="rgb(235,183,28)" fg:x="3" fg:w="10"/><text x="0.3049%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (10 samples, 0.18%)</title><rect x="0.0549%" y="420" width="0.1829%" height="15" fill="rgb(221,5,38)" fg:x="3" fg:w="10"/><text x="0.3049%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (10 samples, 0.18%)</title><rect x="0.0549%" y="436" width="0.1829%" height="15" fill="rgb(247,18,42)" fg:x="3" fg:w="10"/><text x="0.3049%" y="446.50"></text></g><g><title>&lt;module&gt; (pandas\core\api.py:47) (9 samples, 0.16%)</title><rect x="0.0732%" y="452" width="0.1646%" height="15" fill="rgb(241,131,45)" fg:x="4" fg:w="9"/><text x="0.3232%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.0732%" y="468" width="0.1646%" height="15" fill="rgb(249,31,29)" fg:x="4" fg:w="9"/><text x="0.3232%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.0732%" y="484" width="0.1646%" height="15" fill="rgb(225,111,53)" fg:x="4" fg:w="9"/><text x="0.3232%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.0732%" y="500" width="0.1646%" height="15" fill="rgb(238,160,17)" fg:x="4" fg:w="9"/><text x="0.3232%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.0732%" y="516" width="0.1646%" height="15" fill="rgb(214,148,48)" fg:x="4" fg:w="9"/><text x="0.3232%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.0732%" y="532" width="0.1646%" height="15" fill="rgb(232,36,49)" fg:x="4" fg:w="9"/><text x="0.3232%" y="542.50"></text></g><g><title>&lt;module&gt; (pandas\core\groupby\__init__.py:1) (9 samples, 0.16%)</title><rect x="0.0732%" y="548" width="0.1646%" height="15" fill="rgb(209,103,24)" fg:x="4" fg:w="9"/><text x="0.3232%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.0732%" y="564" width="0.1646%" height="15" fill="rgb(229,88,8)" fg:x="4" fg:w="9"/><text x="0.3232%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.0732%" y="580" width="0.1646%" height="15" fill="rgb(213,181,19)" fg:x="4" fg:w="9"/><text x="0.3232%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.0732%" y="596" width="0.1646%" height="15" fill="rgb(254,191,54)" fg:x="4" fg:w="9"/><text x="0.3232%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.0732%" y="612" width="0.1646%" height="15" fill="rgb(241,83,37)" fg:x="4" fg:w="9"/><text x="0.3232%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.0732%" y="628" width="0.1646%" height="15" fill="rgb(233,36,39)" fg:x="4" fg:w="9"/><text x="0.3232%" y="638.50"></text></g><g><title>&lt;module&gt; (scipy\stats\_stats_py.py:46) (13 samples, 0.24%)</title><rect x="0.3658%" y="692" width="0.2377%" height="15" fill="rgb(226,3,54)" fg:x="20" fg:w="13"/><text x="0.6158%" y="702.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (13 samples, 0.24%)</title><rect x="0.3658%" y="708" width="0.2377%" height="15" fill="rgb(245,192,40)" fg:x="20" fg:w="13"/><text x="0.6158%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.24%)</title><rect x="0.3658%" y="724" width="0.2377%" height="15" fill="rgb(238,167,29)" fg:x="20" fg:w="13"/><text x="0.6158%" y="734.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (13 samples, 0.24%)</title><rect x="0.3658%" y="740" width="0.2377%" height="15" fill="rgb(232,182,51)" fg:x="20" fg:w="13"/><text x="0.6158%" y="750.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (13 samples, 0.24%)</title><rect x="0.3658%" y="756" width="0.2377%" height="15" fill="rgb(231,60,39)" fg:x="20" fg:w="13"/><text x="0.6158%" y="766.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (13 samples, 0.24%)</title><rect x="0.3658%" y="772" width="0.2377%" height="15" fill="rgb(208,69,12)" fg:x="20" fg:w="13"/><text x="0.6158%" y="782.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (13 samples, 0.24%)</title><rect x="0.3658%" y="788" width="0.2377%" height="15" fill="rgb(235,93,37)" fg:x="20" fg:w="13"/><text x="0.6158%" y="798.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.24%)</title><rect x="0.3658%" y="804" width="0.2377%" height="15" fill="rgb(213,116,39)" fg:x="20" fg:w="13"/><text x="0.6158%" y="814.50"></text></g><g><title>&lt;module&gt; (Incorporate_into_hierarchical.py:7) (22 samples, 0.40%)</title><rect x="0.2377%" y="452" width="0.4023%" height="15" fill="rgb(222,207,29)" fg:x="13" fg:w="22"/><text x="0.4877%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (22 samples, 0.40%)</title><rect x="0.2377%" y="468" width="0.4023%" height="15" fill="rgb(206,96,30)" fg:x="13" fg:w="22"/><text x="0.4877%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (22 samples, 0.40%)</title><rect x="0.2377%" y="484" width="0.4023%" height="15" fill="rgb(218,138,4)" fg:x="13" fg:w="22"/><text x="0.4877%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.40%)</title><rect x="0.2377%" y="500" width="0.4023%" height="15" fill="rgb(250,191,14)" fg:x="13" fg:w="22"/><text x="0.4877%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (22 samples, 0.40%)</title><rect x="0.2377%" y="516" width="0.4023%" height="15" fill="rgb(239,60,40)" fg:x="13" fg:w="22"/><text x="0.4877%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (22 samples, 0.40%)</title><rect x="0.2377%" y="532" width="0.4023%" height="15" fill="rgb(206,27,48)" fg:x="13" fg:w="22"/><text x="0.4877%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (22 samples, 0.40%)</title><rect x="0.2377%" y="548" width="0.4023%" height="15" fill="rgb(225,35,8)" fg:x="13" fg:w="22"/><text x="0.4877%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (22 samples, 0.40%)</title><rect x="0.2377%" y="564" width="0.4023%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="22"/><text x="0.4877%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.40%)</title><rect x="0.2377%" y="580" width="0.4023%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="22"/><text x="0.4877%" y="590.50"></text></g><g><title>&lt;module&gt; (scipy\stats\__init__.py:467) (22 samples, 0.40%)</title><rect x="0.2377%" y="596" width="0.4023%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="22"/><text x="0.4877%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (22 samples, 0.40%)</title><rect x="0.2377%" y="612" width="0.4023%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="22"/><text x="0.4877%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (22 samples, 0.40%)</title><rect x="0.2377%" y="628" width="0.4023%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="22"/><text x="0.4877%" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (22 samples, 0.40%)</title><rect x="0.2377%" y="644" width="0.4023%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="22"/><text x="0.4877%" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (22 samples, 0.40%)</title><rect x="0.2377%" y="660" width="0.4023%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="22"/><text x="0.4877%" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (22 samples, 0.40%)</title><rect x="0.2377%" y="676" width="0.4023%" height="15" fill="rgb(209,12,38)" fg:x="13" fg:w="22"/><text x="0.4877%" y="686.50"></text></g><g><title>&lt;module&gt; (sklearn\utils\__init__.py:19) (6 samples, 0.11%)</title><rect x="0.6401%" y="788" width="0.1097%" height="15" fill="rgb(227,1,9)" fg:x="35" fg:w="6"/><text x="0.8901%" y="798.50"></text></g><g><title>_handle_fromlist (&lt;frozen importlib._bootstrap&gt;:1042) (6 samples, 0.11%)</title><rect x="0.6401%" y="804" width="0.1097%" height="15" fill="rgb(248,47,43)" fg:x="35" fg:w="6"/><text x="0.8901%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.11%)</title><rect x="0.6401%" y="820" width="0.1097%" height="15" fill="rgb(221,10,30)" fg:x="35" fg:w="6"/><text x="0.8901%" y="830.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (6 samples, 0.11%)</title><rect x="0.6401%" y="836" width="0.1097%" height="15" fill="rgb(210,229,1)" fg:x="35" fg:w="6"/><text x="0.8901%" y="846.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (6 samples, 0.11%)</title><rect x="0.6401%" y="852" width="0.1097%" height="15" fill="rgb(222,148,37)" fg:x="35" fg:w="6"/><text x="0.8901%" y="862.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (6 samples, 0.11%)</title><rect x="0.6401%" y="868" width="0.1097%" height="15" fill="rgb(234,67,33)" fg:x="35" fg:w="6"/><text x="0.8901%" y="878.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (6 samples, 0.11%)</title><rect x="0.6401%" y="884" width="0.1097%" height="15" fill="rgb(247,98,35)" fg:x="35" fg:w="6"/><text x="0.8901%" y="894.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.11%)</title><rect x="0.6401%" y="900" width="0.1097%" height="15" fill="rgb(247,138,52)" fg:x="35" fg:w="6"/><text x="0.8901%" y="910.50"></text></g><g><title>&lt;module&gt; (sklearn\utils\_joblib.py:7) (6 samples, 0.11%)</title><rect x="0.6401%" y="916" width="0.1097%" height="15" fill="rgb(213,79,30)" fg:x="35" fg:w="6"/><text x="0.8901%" y="926.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (6 samples, 0.11%)</title><rect x="0.6401%" y="932" width="0.1097%" height="15" fill="rgb(246,177,23)" fg:x="35" fg:w="6"/><text x="0.8901%" y="942.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (6 samples, 0.11%)</title><rect x="0.6401%" y="948" width="0.1097%" height="15" fill="rgb(230,62,27)" fg:x="35" fg:w="6"/><text x="0.8901%" y="958.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (6 samples, 0.11%)</title><rect x="0.6401%" y="964" width="0.1097%" height="15" fill="rgb(216,154,8)" fg:x="35" fg:w="6"/><text x="0.8901%" y="974.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (6 samples, 0.11%)</title><rect x="0.6401%" y="980" width="0.1097%" height="15" fill="rgb(244,35,45)" fg:x="35" fg:w="6"/><text x="0.8901%" y="990.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (6 samples, 0.11%)</title><rect x="0.6401%" y="996" width="0.1097%" height="15" fill="rgb(251,115,12)" fg:x="35" fg:w="6"/><text x="0.8901%" y="1006.50"></text></g><g><title>&lt;module&gt; (sklearn\base.py:19) (8 samples, 0.15%)</title><rect x="0.6401%" y="692" width="0.1463%" height="15" fill="rgb(240,54,50)" fg:x="35" fg:w="8"/><text x="0.8901%" y="702.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (8 samples, 0.15%)</title><rect x="0.6401%" y="708" width="0.1463%" height="15" fill="rgb(233,84,52)" fg:x="35" fg:w="8"/><text x="0.8901%" y="718.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (8 samples, 0.15%)</title><rect x="0.6401%" y="724" width="0.1463%" height="15" fill="rgb(207,117,47)" fg:x="35" fg:w="8"/><text x="0.8901%" y="734.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (8 samples, 0.15%)</title><rect x="0.6401%" y="740" width="0.1463%" height="15" fill="rgb(249,43,39)" fg:x="35" fg:w="8"/><text x="0.8901%" y="750.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (8 samples, 0.15%)</title><rect x="0.6401%" y="756" width="0.1463%" height="15" fill="rgb(209,38,44)" fg:x="35" fg:w="8"/><text x="0.8901%" y="766.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (8 samples, 0.15%)</title><rect x="0.6401%" y="772" width="0.1463%" height="15" fill="rgb(236,212,23)" fg:x="35" fg:w="8"/><text x="0.8901%" y="782.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:961) (9 samples, 0.16%)</title><rect x="0.6401%" y="484" width="0.1646%" height="15" fill="rgb(242,79,21)" fg:x="35" fg:w="9"/><text x="0.8901%" y="494.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.6401%" y="500" width="0.1646%" height="15" fill="rgb(211,96,35)" fg:x="35" fg:w="9"/><text x="0.8901%" y="510.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.6401%" y="516" width="0.1646%" height="15" fill="rgb(253,215,40)" fg:x="35" fg:w="9"/><text x="0.8901%" y="526.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.6401%" y="532" width="0.1646%" height="15" fill="rgb(211,81,21)" fg:x="35" fg:w="9"/><text x="0.8901%" y="542.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.6401%" y="548" width="0.1646%" height="15" fill="rgb(208,190,38)" fg:x="35" fg:w="9"/><text x="0.8901%" y="558.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.6401%" y="564" width="0.1646%" height="15" fill="rgb(235,213,38)" fg:x="35" fg:w="9"/><text x="0.8901%" y="574.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.6401%" y="580" width="0.1646%" height="15" fill="rgb(237,122,38)" fg:x="35" fg:w="9"/><text x="0.8901%" y="590.50"></text></g><g><title>&lt;module&gt; (sklearn\__init__.py:83) (9 samples, 0.16%)</title><rect x="0.6401%" y="596" width="0.1646%" height="15" fill="rgb(244,218,35)" fg:x="35" fg:w="9"/><text x="0.8901%" y="606.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.6401%" y="612" width="0.1646%" height="15" fill="rgb(240,68,47)" fg:x="35" fg:w="9"/><text x="0.8901%" y="622.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.6401%" y="628" width="0.1646%" height="15" fill="rgb(210,16,53)" fg:x="35" fg:w="9"/><text x="0.8901%" y="638.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.6401%" y="644" width="0.1646%" height="15" fill="rgb(235,124,12)" fg:x="35" fg:w="9"/><text x="0.8901%" y="654.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.6401%" y="660" width="0.1646%" height="15" fill="rgb(224,169,11)" fg:x="35" fg:w="9"/><text x="0.8901%" y="670.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.6401%" y="676" width="0.1646%" height="15" fill="rgb(250,166,2)" fg:x="35" fg:w="9"/><text x="0.8901%" y="686.50"></text></g><g><title>&lt;module&gt; (sklearn\cluster\__init__.py:16) (9 samples, 0.16%)</title><rect x="0.8047%" y="548" width="0.1646%" height="15" fill="rgb(242,216,29)" fg:x="44" fg:w="9"/><text x="1.0547%" y="558.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.8047%" y="564" width="0.1646%" height="15" fill="rgb(230,116,27)" fg:x="44" fg:w="9"/><text x="1.0547%" y="574.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.8047%" y="580" width="0.1646%" height="15" fill="rgb(228,99,48)" fg:x="44" fg:w="9"/><text x="1.0547%" y="590.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.8047%" y="596" width="0.1646%" height="15" fill="rgb(253,11,6)" fg:x="44" fg:w="9"/><text x="1.0547%" y="606.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.8047%" y="612" width="0.1646%" height="15" fill="rgb(247,143,39)" fg:x="44" fg:w="9"/><text x="1.0547%" y="622.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.8047%" y="628" width="0.1646%" height="15" fill="rgb(236,97,10)" fg:x="44" fg:w="9"/><text x="1.0547%" y="638.50"></text></g><g><title>&lt;module&gt; (sklearn\cluster\_dbscan.py:19) (9 samples, 0.16%)</title><rect x="0.8047%" y="644" width="0.1646%" height="15" fill="rgb(233,208,19)" fg:x="44" fg:w="9"/><text x="1.0547%" y="654.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.8047%" y="660" width="0.1646%" height="15" fill="rgb(216,164,2)" fg:x="44" fg:w="9"/><text x="1.0547%" y="670.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.8047%" y="676" width="0.1646%" height="15" fill="rgb(220,129,5)" fg:x="44" fg:w="9"/><text x="1.0547%" y="686.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.8047%" y="692" width="0.1646%" height="15" fill="rgb(242,17,10)" fg:x="44" fg:w="9"/><text x="1.0547%" y="702.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.8047%" y="708" width="0.1646%" height="15" fill="rgb(242,107,0)" fg:x="44" fg:w="9"/><text x="1.0547%" y="718.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.8047%" y="724" width="0.1646%" height="15" fill="rgb(251,28,31)" fg:x="44" fg:w="9"/><text x="1.0547%" y="734.50"></text></g><g><title>&lt;module&gt; (sklearn\neighbors\__init__.py:18) (9 samples, 0.16%)</title><rect x="0.8047%" y="740" width="0.1646%" height="15" fill="rgb(233,223,10)" fg:x="44" fg:w="9"/><text x="1.0547%" y="750.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.8047%" y="756" width="0.1646%" height="15" fill="rgb(215,21,27)" fg:x="44" fg:w="9"/><text x="1.0547%" y="766.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.8047%" y="772" width="0.1646%" height="15" fill="rgb(232,23,21)" fg:x="44" fg:w="9"/><text x="1.0547%" y="782.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.8047%" y="788" width="0.1646%" height="15" fill="rgb(244,5,23)" fg:x="44" fg:w="9"/><text x="1.0547%" y="798.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.8047%" y="804" width="0.1646%" height="15" fill="rgb(226,81,46)" fg:x="44" fg:w="9"/><text x="1.0547%" y="814.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.8047%" y="820" width="0.1646%" height="15" fill="rgb(247,70,30)" fg:x="44" fg:w="9"/><text x="1.0547%" y="830.50"></text></g><g><title>&lt;module&gt; (sklearn\neighbors\_nca.py:23) (9 samples, 0.16%)</title><rect x="0.8047%" y="836" width="0.1646%" height="15" fill="rgb(212,68,19)" fg:x="44" fg:w="9"/><text x="1.0547%" y="846.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (9 samples, 0.16%)</title><rect x="0.8047%" y="852" width="0.1646%" height="15" fill="rgb(240,187,13)" fg:x="44" fg:w="9"/><text x="1.0547%" y="862.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (9 samples, 0.16%)</title><rect x="0.8047%" y="868" width="0.1646%" height="15" fill="rgb(223,113,26)" fg:x="44" fg:w="9"/><text x="1.0547%" y="878.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (9 samples, 0.16%)</title><rect x="0.8047%" y="884" width="0.1646%" height="15" fill="rgb(206,192,2)" fg:x="44" fg:w="9"/><text x="1.0547%" y="894.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (9 samples, 0.16%)</title><rect x="0.8047%" y="900" width="0.1646%" height="15" fill="rgb(241,108,4)" fg:x="44" fg:w="9"/><text x="1.0547%" y="910.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (9 samples, 0.16%)</title><rect x="0.8047%" y="916" width="0.1646%" height="15" fill="rgb(247,173,49)" fg:x="44" fg:w="9"/><text x="1.0547%" y="926.50"></text></g><g><title>&lt;module&gt; (sklearn\decomposition\__init__.py:9) (7 samples, 0.13%)</title><rect x="0.8413%" y="932" width="0.1280%" height="15" fill="rgb(224,114,35)" fg:x="46" fg:w="7"/><text x="1.0913%" y="942.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (7 samples, 0.13%)</title><rect x="0.8413%" y="948" width="0.1280%" height="15" fill="rgb(245,159,27)" fg:x="46" fg:w="7"/><text x="1.0913%" y="958.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (6 samples, 0.11%)</title><rect x="0.8595%" y="964" width="0.1097%" height="15" fill="rgb(245,172,44)" fg:x="47" fg:w="6"/><text x="1.1095%" y="974.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (6 samples, 0.11%)</title><rect x="0.8595%" y="980" width="0.1097%" height="15" fill="rgb(236,23,11)" fg:x="47" fg:w="6"/><text x="1.1095%" y="990.50"></text></g><g><title>&lt;module&gt; (Config.py:4) (57 samples, 1.04%)</title><rect x="0.0000%" y="68" width="1.0424%" height="15" fill="rgb(205,117,38)" fg:x="0" fg:w="57"/><text x="0.2500%" y="78.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (57 samples, 1.04%)</title><rect x="0.0000%" y="84" width="1.0424%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="57"/><text x="0.2500%" y="94.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (57 samples, 1.04%)</title><rect x="0.0000%" y="100" width="1.0424%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="57"/><text x="0.2500%" y="110.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (57 samples, 1.04%)</title><rect x="0.0000%" y="116" width="1.0424%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="57"/><text x="0.2500%" y="126.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (57 samples, 1.04%)</title><rect x="0.0000%" y="132" width="1.0424%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="57"/><text x="0.2500%" y="142.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (57 samples, 1.04%)</title><rect x="0.0000%" y="148" width="1.0424%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="57"/><text x="0.2500%" y="158.50"></text></g><g><title>&lt;module&gt; (Cafd.py:4) (44 samples, 0.80%)</title><rect x="0.2377%" y="164" width="0.8047%" height="15" fill="rgb(221,13,13)" fg:x="13" fg:w="44"/><text x="0.4877%" y="174.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (44 samples, 0.80%)</title><rect x="0.2377%" y="180" width="0.8047%" height="15" fill="rgb(238,131,9)" fg:x="13" fg:w="44"/><text x="0.4877%" y="190.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (44 samples, 0.80%)</title><rect x="0.2377%" y="196" width="0.8047%" height="15" fill="rgb(211,50,8)" fg:x="13" fg:w="44"/><text x="0.4877%" y="206.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (44 samples, 0.80%)</title><rect x="0.2377%" y="212" width="0.8047%" height="15" fill="rgb(245,182,24)" fg:x="13" fg:w="44"/><text x="0.4877%" y="222.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (44 samples, 0.80%)</title><rect x="0.2377%" y="228" width="0.8047%" height="15" fill="rgb(242,14,37)" fg:x="13" fg:w="44"/><text x="0.4877%" y="238.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (44 samples, 0.80%)</title><rect x="0.2377%" y="244" width="0.8047%" height="15" fill="rgb(246,228,12)" fg:x="13" fg:w="44"/><text x="0.4877%" y="254.50"></text></g><g><title>&lt;module&gt; (SearchSpace_bit.py:1) (44 samples, 0.80%)</title><rect x="0.2377%" y="260" width="0.8047%" height="15" fill="rgb(213,55,15)" fg:x="13" fg:w="44"/><text x="0.4877%" y="270.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (44 samples, 0.80%)</title><rect x="0.2377%" y="276" width="0.8047%" height="15" fill="rgb(209,9,3)" fg:x="13" fg:w="44"/><text x="0.4877%" y="286.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (44 samples, 0.80%)</title><rect x="0.2377%" y="292" width="0.8047%" height="15" fill="rgb(230,59,30)" fg:x="13" fg:w="44"/><text x="0.4877%" y="302.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (44 samples, 0.80%)</title><rect x="0.2377%" y="308" width="0.8047%" height="15" fill="rgb(209,121,21)" fg:x="13" fg:w="44"/><text x="0.4877%" y="318.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (44 samples, 0.80%)</title><rect x="0.2377%" y="324" width="0.8047%" height="15" fill="rgb(220,109,13)" fg:x="13" fg:w="44"/><text x="0.4877%" y="334.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (44 samples, 0.80%)</title><rect x="0.2377%" y="340" width="0.8047%" height="15" fill="rgb(232,18,1)" fg:x="13" fg:w="44"/><text x="0.4877%" y="350.50"></text></g><g><title>&lt;module&gt; (Correlation_utils.py:7) (44 samples, 0.80%)</title><rect x="0.2377%" y="356" width="0.8047%" height="15" fill="rgb(215,41,42)" fg:x="13" fg:w="44"/><text x="0.4877%" y="366.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (44 samples, 0.80%)</title><rect x="0.2377%" y="372" width="0.8047%" height="15" fill="rgb(224,123,36)" fg:x="13" fg:w="44"/><text x="0.4877%" y="382.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (44 samples, 0.80%)</title><rect x="0.2377%" y="388" width="0.8047%" height="15" fill="rgb(240,125,3)" fg:x="13" fg:w="44"/><text x="0.4877%" y="398.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (44 samples, 0.80%)</title><rect x="0.2377%" y="404" width="0.8047%" height="15" fill="rgb(205,98,50)" fg:x="13" fg:w="44"/><text x="0.4877%" y="414.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (44 samples, 0.80%)</title><rect x="0.2377%" y="420" width="0.8047%" height="15" fill="rgb(205,185,37)" fg:x="13" fg:w="44"/><text x="0.4877%" y="430.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (44 samples, 0.80%)</title><rect x="0.2377%" y="436" width="0.8047%" height="15" fill="rgb(238,207,15)" fg:x="13" fg:w="44"/><text x="0.4877%" y="446.50"></text></g><g><title>&lt;module&gt; (Incorporate_into_hierarchical.py:8) (22 samples, 0.40%)</title><rect x="0.6401%" y="452" width="0.4023%" height="15" fill="rgb(213,199,42)" fg:x="35" fg:w="22"/><text x="0.8901%" y="462.50"></text></g><g><title>_find_and_load (&lt;frozen importlib._bootstrap&gt;:991) (22 samples, 0.40%)</title><rect x="0.6401%" y="468" width="0.4023%" height="15" fill="rgb(235,201,11)" fg:x="35" fg:w="22"/><text x="0.8901%" y="478.50"></text></g><g><title>_find_and_load_unlocked (&lt;frozen importlib._bootstrap&gt;:975) (13 samples, 0.24%)</title><rect x="0.8047%" y="484" width="0.2377%" height="15" fill="rgb(207,46,11)" fg:x="44" fg:w="13"/><text x="1.0547%" y="494.50"></text></g><g><title>_load_unlocked (&lt;frozen importlib._bootstrap&gt;:671) (13 samples, 0.24%)</title><rect x="0.8047%" y="500" width="0.2377%" height="15" fill="rgb(241,35,35)" fg:x="44" fg:w="13"/><text x="1.0547%" y="510.50"></text></g><g><title>exec_module (&lt;frozen importlib._bootstrap_external&gt;:843) (13 samples, 0.24%)</title><rect x="0.8047%" y="516" width="0.2377%" height="15" fill="rgb(243,32,47)" fg:x="44" fg:w="13"/><text x="1.0547%" y="526.50"></text></g><g><title>_call_with_frames_removed (&lt;frozen importlib._bootstrap&gt;:219) (13 samples, 0.24%)</title><rect x="0.8047%" y="532" width="0.2377%" height="15" fill="rgb(247,202,23)" fg:x="44" fg:w="13"/><text x="1.0547%" y="542.50"></text></g><g><title>read (pandas\io\parsers\readers.py:1704) (13 samples, 0.24%)</title><rect x="1.0424%" y="148" width="0.2377%" height="15" fill="rgb(219,102,11)" fg:x="57" fg:w="13"/><text x="1.2924%" y="158.50"></text></g><g><title>read (pandas\io\parsers\c_parser_wrapper.py:239) (13 samples, 0.24%)</title><rect x="1.0424%" y="164" width="0.2377%" height="15" fill="rgb(243,110,44)" fg:x="57" fg:w="13"/><text x="1.2924%" y="174.50"></text></g><g><title>random_sample (Sampler.py:35) (17 samples, 0.31%)</title><rect x="1.0424%" y="100" width="0.3109%" height="15" fill="rgb(222,74,54)" fg:x="57" fg:w="17"/><text x="1.2924%" y="110.50"></text></g><g><title>read_csv (pandas\io\parsers\readers.py:912) (17 samples, 0.31%)</title><rect x="1.0424%" y="116" width="0.3109%" height="15" fill="rgb(216,99,12)" fg:x="57" fg:w="17"/><text x="1.2924%" y="126.50"></text></g><g><title>_read (pandas\io\parsers\readers.py:583) (17 samples, 0.31%)</title><rect x="1.0424%" y="132" width="0.3109%" height="15" fill="rgb(226,22,26)" fg:x="57" fg:w="17"/><text x="1.2924%" y="142.50"></text></g><g><title>random_sample (Sampler.py:62) (12 samples, 0.22%)</title><rect x="1.4996%" y="100" width="0.2195%" height="15" fill="rgb(217,163,10)" fg:x="82" fg:w="12"/><text x="1.7496%" y="110.50"></text></g><g><title>nunique (pandas\core\base.py:1068) (11 samples, 0.20%)</title><rect x="1.5179%" y="116" width="0.2012%" height="15" fill="rgb(213,25,53)" fg:x="83" fg:w="11"/><text x="1.7679%" y="126.50"></text></g><g><title>unique (pandas\core\series.py:2194) (11 samples, 0.20%)</title><rect x="1.5179%" y="132" width="0.2012%" height="15" fill="rgb(252,105,26)" fg:x="83" fg:w="11"/><text x="1.7679%" y="142.50"></text></g><g><title>unique (pandas\core\base.py:1030) (10 samples, 0.18%)</title><rect x="1.5362%" y="148" width="0.1829%" height="15" fill="rgb(220,39,43)" fg:x="84" fg:w="10"/><text x="1.7862%" y="158.50"></text></g><g><title>unique (pandas\core\algorithms.py:390) (10 samples, 0.18%)</title><rect x="1.5362%" y="164" width="0.1829%" height="15" fill="rgb(229,68,48)" fg:x="84" fg:w="10"/><text x="1.7862%" y="174.50"></text></g><g><title>unique_with_mask (pandas\core\algorithms.py:429) (10 samples, 0.18%)</title><rect x="1.5362%" y="180" width="0.1829%" height="15" fill="rgb(252,8,32)" fg:x="84" fg:w="10"/><text x="1.7862%" y="190.50"></text></g><g><title>execute (Cafd.py:75) (39 samples, 0.71%)</title><rect x="1.0424%" y="84" width="0.7132%" height="15" fill="rgb(223,20,43)" fg:x="57" fg:w="39"/><text x="1.2924%" y="94.50"></text></g><g><title>build_linked_table (Correlation_utils.py:65) (6 samples, 0.11%)</title><rect x="4.3160%" y="196" width="0.1097%" height="15" fill="rgb(229,81,49)" fg:x="236" fg:w="6"/><text x="4.5660%" y="206.50"></text></g><g><title>build_linked_table (Correlation_utils.py:74) (96 samples, 1.76%)</title><rect x="4.6086%" y="196" width="1.7557%" height="15" fill="rgb(236,28,36)" fg:x="252" fg:w="96"/><text x="4.8586%" y="206.50"></text></g><g><title>build_linked_table (Correlation_utils.py:79) (11 samples, 0.20%)</title><rect x="6.5106%" y="196" width="0.2012%" height="15" fill="rgb(249,185,26)" fg:x="356" fg:w="11"/><text x="6.7606%" y="206.50"></text></g><g><title>build_linked_table (Correlation_utils.py:80) (89 samples, 1.63%)</title><rect x="6.7118%" y="196" width="1.6277%" height="15" fill="rgb(249,174,33)" fg:x="367" fg:w="89"/><text x="6.9618%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:80) (59 samples, 1.08%)</title><rect x="7.2604%" y="212" width="1.0790%" height="15" fill="rgb(233,201,37)" fg:x="397" fg:w="59"/><text x="7.5104%" y="222.50"></text></g><g><title>compute_correlation (Correlation_utils.py:300) (728 samples, 13.31%)</title><rect x="3.5845%" y="180" width="13.3138%" height="15" fill="rgb(221,78,26)" fg:x="196" fg:w="728"/><text x="3.8345%" y="190.50">compute_correlation ..</text></g><g><title>build_linked_table (Correlation_utils.py:87) (466 samples, 8.52%)</title><rect x="8.3760%" y="196" width="8.5223%" height="15" fill="rgb(250,127,30)" fg:x="458" fg:w="466"/><text x="8.6260%" y="206.50">build_linked..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:87) (390 samples, 7.13%)</title><rect x="9.7659%" y="212" width="7.1324%" height="15" fill="rgb(230,49,44)" fg:x="534" fg:w="390"/><text x="10.0159%" y="222.50">&lt;listcomp&gt;..</text></g><g><title>compute_expected_frequencies (Correlation_utils.py:157) (38 samples, 0.69%)</title><rect x="16.8983%" y="196" width="0.6950%" height="15" fill="rgb(229,67,23)" fg:x="924" fg:w="38"/><text x="17.1483%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:157) (38 samples, 0.69%)</title><rect x="16.8983%" y="212" width="0.6950%" height="15" fill="rgb(249,83,47)" fg:x="924" fg:w="38"/><text x="17.1483%" y="222.50"></text></g><g><title>compute_expected_frequencies (Correlation_utils.py:158) (92 samples, 1.68%)</title><rect x="17.5933%" y="196" width="1.6825%" height="15" fill="rgb(215,43,3)" fg:x="962" fg:w="92"/><text x="17.8433%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:158) (84 samples, 1.54%)</title><rect x="17.7396%" y="212" width="1.5362%" height="15" fill="rgb(238,154,13)" fg:x="970" fg:w="84"/><text x="17.9896%" y="222.50"></text></g><g><title>compute_correlation (Correlation_utils.py:306) (533 samples, 9.75%)</title><rect x="16.8983%" y="180" width="9.7476%" height="15" fill="rgb(219,56,2)" fg:x="924" fg:w="533"/><text x="17.1483%" y="190.50">compute_correl..</text></g><g><title>compute_expected_frequencies (Correlation_utils.py:162) (403 samples, 7.37%)</title><rect x="19.2758%" y="196" width="7.3702%" height="15" fill="rgb(233,0,4)" fg:x="1054" fg:w="403"/><text x="19.5258%" y="206.50">compute_ex..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (403 samples, 7.37%)</title><rect x="19.2758%" y="212" width="7.3702%" height="15" fill="rgb(235,30,7)" fg:x="1054" fg:w="403"/><text x="19.5258%" y="222.50">&lt;listcomp&gt;..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (401 samples, 7.33%)</title><rect x="19.3124%" y="228" width="7.3336%" height="15" fill="rgb(250,79,13)" fg:x="1056" fg:w="401"/><text x="19.5624%" y="238.50">&lt;listcomp&gt;..</text></g><g><title>compute_correlation (Correlation_utils.py:308) (164 samples, 3.00%)</title><rect x="26.6459%" y="180" width="2.9993%" height="15" fill="rgb(211,146,34)" fg:x="1457" fg:w="164"/><text x="26.8959%" y="190.50">com..</text></g><g><title>_check_expected_frequencies (Correlation_utils.py:175) (164 samples, 3.00%)</title><rect x="26.6459%" y="196" width="2.9993%" height="15" fill="rgb(228,22,38)" fg:x="1457" fg:w="164"/><text x="26.8959%" y="206.50">_ch..</text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:175) (164 samples, 3.00%)</title><rect x="26.6459%" y="212" width="2.9993%" height="15" fill="rgb(235,168,5)" fg:x="1457" fg:w="164"/><text x="26.8959%" y="222.50">&lt;ge..</text></g><g><title>compute_correlation (Correlation_utils.py:319) (19 samples, 0.35%)</title><rect x="29.8830%" y="180" width="0.3475%" height="15" fill="rgb(221,155,16)" fg:x="1634" fg:w="19"/><text x="30.1330%" y="190.50"></text></g><g><title>linkage (scipy\cluster\hierarchy.py:1060) (20 samples, 0.37%)</title><rect x="30.4316%" y="356" width="0.3658%" height="15" fill="rgb(215,215,53)" fg:x="1664" fg:w="20"/><text x="30.6816%" y="366.50"></text></g><g><title>pdist (scipy\spatial\distance.py:2233) (20 samples, 0.37%)</title><rect x="30.4316%" y="372" width="0.3658%" height="15" fill="rgb(223,4,10)" fg:x="1664" fg:w="20"/><text x="30.6816%" y="382.50"></text></g><g><title>_fit (sklearn\cluster\_agglomerative.py:1070) (33 samples, 0.60%)</title><rect x="30.4316%" y="292" width="0.6035%" height="15" fill="rgb(234,103,6)" fg:x="1664" fg:w="33"/><text x="30.6816%" y="302.50"></text></g><g><title>__call__ (joblib\memory.py:312) (33 samples, 0.60%)</title><rect x="30.4316%" y="308" width="0.6035%" height="15" fill="rgb(227,97,0)" fg:x="1664" fg:w="33"/><text x="30.6816%" y="318.50"></text></g><g><title>_average_linkage (sklearn\cluster\_agglomerative.py:692) (33 samples, 0.60%)</title><rect x="30.4316%" y="324" width="0.6035%" height="15" fill="rgb(234,150,53)" fg:x="1664" fg:w="33"/><text x="30.6816%" y="334.50"></text></g><g><title>linkage_tree (sklearn\cluster\_agglomerative.py:566) (33 samples, 0.60%)</title><rect x="30.4316%" y="340" width="0.6035%" height="15" fill="rgb(228,201,54)" fg:x="1664" fg:w="33"/><text x="30.6816%" y="350.50"></text></g><g><title>linkage (scipy\cluster\hierarchy.py:1074) (13 samples, 0.24%)</title><rect x="30.7974%" y="356" width="0.2377%" height="15" fill="rgb(222,22,37)" fg:x="1684" fg:w="13"/><text x="31.0474%" y="366.50"></text></g><g><title>merge_tables (Incorporate_into_hierarchical.py:278) (44 samples, 0.80%)</title><rect x="30.3219%" y="196" width="0.8047%" height="15" fill="rgb(237,53,32)" fg:x="1658" fg:w="44"/><text x="30.5719%" y="206.50"></text></g><g><title>cluster_rows (Incorporate_into_hierarchical.py:179) (43 samples, 0.79%)</title><rect x="30.3402%" y="212" width="0.7864%" height="15" fill="rgb(233,25,53)" fg:x="1659" fg:w="43"/><text x="30.5902%" y="222.50"></text></g><g><title>fit_predict (sklearn\cluster\_agglomerative.py:1123) (43 samples, 0.79%)</title><rect x="30.3402%" y="228" width="0.7864%" height="15" fill="rgb(210,40,34)" fg:x="1659" fg:w="43"/><text x="30.5902%" y="238.50"></text></g><g><title>fit_predict (sklearn\base.py:790) (43 samples, 0.79%)</title><rect x="30.3402%" y="244" width="0.7864%" height="15" fill="rgb(241,220,44)" fg:x="1659" fg:w="43"/><text x="30.5902%" y="254.50"></text></g><g><title>wrapper (sklearn\base.py:1151) (40 samples, 0.73%)</title><rect x="30.3950%" y="260" width="0.7315%" height="15" fill="rgb(235,28,35)" fg:x="1662" fg:w="40"/><text x="30.6450%" y="270.50"></text></g><g><title>fit (sklearn\cluster\_agglomerative.py:978) (38 samples, 0.69%)</title><rect x="30.4316%" y="276" width="0.6950%" height="15" fill="rgb(210,56,17)" fg:x="1664" fg:w="38"/><text x="30.6816%" y="286.50"></text></g><g><title>linkage (scipy\cluster\hierarchy.py:1060) (13 samples, 0.24%)</title><rect x="31.1266%" y="356" width="0.2377%" height="15" fill="rgb(224,130,29)" fg:x="1702" fg:w="13"/><text x="31.3766%" y="366.50"></text></g><g><title>pdist (scipy\spatial\distance.py:2233) (13 samples, 0.24%)</title><rect x="31.1266%" y="372" width="0.2377%" height="15" fill="rgb(235,212,8)" fg:x="1702" fg:w="13"/><text x="31.3766%" y="382.50"></text></g><g><title>merge_tables (Incorporate_into_hierarchical.py:279) (15 samples, 0.27%)</title><rect x="31.1266%" y="196" width="0.2743%" height="15" fill="rgb(223,33,50)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="206.50"></text></g><g><title>cluster_columns (Incorporate_into_hierarchical.py:201) (15 samples, 0.27%)</title><rect x="31.1266%" y="212" width="0.2743%" height="15" fill="rgb(219,149,13)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="222.50"></text></g><g><title>fit_predict (sklearn\cluster\_agglomerative.py:1123) (15 samples, 0.27%)</title><rect x="31.1266%" y="228" width="0.2743%" height="15" fill="rgb(250,156,29)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="238.50"></text></g><g><title>fit_predict (sklearn\base.py:790) (15 samples, 0.27%)</title><rect x="31.1266%" y="244" width="0.2743%" height="15" fill="rgb(216,193,19)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="254.50"></text></g><g><title>wrapper (sklearn\base.py:1151) (15 samples, 0.27%)</title><rect x="31.1266%" y="260" width="0.2743%" height="15" fill="rgb(216,135,14)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="270.50"></text></g><g><title>fit (sklearn\cluster\_agglomerative.py:978) (15 samples, 0.27%)</title><rect x="31.1266%" y="276" width="0.2743%" height="15" fill="rgb(241,47,5)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="286.50"></text></g><g><title>_fit (sklearn\cluster\_agglomerative.py:1070) (15 samples, 0.27%)</title><rect x="31.1266%" y="292" width="0.2743%" height="15" fill="rgb(233,42,35)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="302.50"></text></g><g><title>__call__ (joblib\memory.py:312) (15 samples, 0.27%)</title><rect x="31.1266%" y="308" width="0.2743%" height="15" fill="rgb(231,13,6)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="318.50"></text></g><g><title>_average_linkage (sklearn\cluster\_agglomerative.py:692) (15 samples, 0.27%)</title><rect x="31.1266%" y="324" width="0.2743%" height="15" fill="rgb(207,181,40)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="334.50"></text></g><g><title>linkage_tree (sklearn\cluster\_agglomerative.py:566) (15 samples, 0.27%)</title><rect x="31.1266%" y="340" width="0.2743%" height="15" fill="rgb(254,173,49)" fg:x="1702" fg:w="15"/><text x="31.3766%" y="350.50"></text></g><g><title>merge_by_clusters (Incorporate_into_hierarchical.py:221) (6 samples, 0.11%)</title><rect x="31.4557%" y="212" width="0.1097%" height="15" fill="rgb(221,1,38)" fg:x="1720" fg:w="6"/><text x="31.7057%" y="222.50"></text></g><g><title>where (&lt;__array_function__ internals&gt;:180) (13 samples, 0.24%)</title><rect x="34.0710%" y="228" width="0.2377%" height="15" fill="rgb(206,124,46)" fg:x="1863" fg:w="13"/><text x="34.3210%" y="238.50"></text></g><g><title>where (&lt;__array_function__ internals&gt;:200) (52 samples, 0.95%)</title><rect x="34.3087%" y="228" width="0.9510%" height="15" fill="rgb(249,21,11)" fg:x="1876" fg:w="52"/><text x="34.5587%" y="238.50"></text></g><g><title>merge_by_clusters (Incorporate_into_hierarchical.py:222) (204 samples, 3.73%)</title><rect x="31.5655%" y="212" width="3.7308%" height="15" fill="rgb(222,201,40)" fg:x="1726" fg:w="204"/><text x="31.8155%" y="222.50">merg..</text></g><g><title>_sum (numpy\core\_methods.py:49) (103 samples, 1.88%)</title><rect x="37.8749%" y="228" width="1.8837%" height="15" fill="rgb(235,61,29)" fg:x="2071" fg:w="103"/><text x="38.1249%" y="238.50">_..</text></g><g><title>ix_ (numpy\lib\index_tricks.py:101) (14 samples, 0.26%)</title><rect x="40.1609%" y="244" width="0.2560%" height="15" fill="rgb(219,207,3)" fg:x="2196" fg:w="14"/><text x="40.4109%" y="254.50"></text></g><g><title>issubclass_ (numpy\core\numerictypes.py:319) (34 samples, 0.62%)</title><rect x="40.9473%" y="276" width="0.6218%" height="15" fill="rgb(222,56,46)" fg:x="2239" fg:w="34"/><text x="41.1973%" y="286.50"></text></g><g><title>issubclass_ (numpy\core\numerictypes.py:320) (7 samples, 0.13%)</title><rect x="41.5691%" y="276" width="0.1280%" height="15" fill="rgb(239,76,54)" fg:x="2273" fg:w="7"/><text x="41.8191%" y="286.50"></text></g><g><title>issubdtype (numpy\core\numerictypes.py:415) (64 samples, 1.17%)</title><rect x="40.8010%" y="260" width="1.1704%" height="15" fill="rgb(231,124,27)" fg:x="2231" fg:w="64"/><text x="41.0510%" y="270.50"></text></g><g><title>issubclass_ (numpy\core\numerictypes.py:321) (15 samples, 0.27%)</title><rect x="41.6971%" y="276" width="0.2743%" height="15" fill="rgb(249,195,6)" fg:x="2280" fg:w="15"/><text x="41.9471%" y="286.50"></text></g><g><title>issubdtype (numpy\core\numerictypes.py:416) (21 samples, 0.38%)</title><rect x="41.9715%" y="260" width="0.3841%" height="15" fill="rgb(237,174,47)" fg:x="2295" fg:w="21"/><text x="42.2215%" y="270.50"></text></g><g><title>issubdtype (numpy\core\numerictypes.py:417) (7 samples, 0.13%)</title><rect x="42.3555%" y="260" width="0.1280%" height="15" fill="rgb(206,201,31)" fg:x="2316" fg:w="7"/><text x="42.6055%" y="270.50"></text></g><g><title>ix_ (numpy\lib\index_tricks.py:103) (118 samples, 2.16%)</title><rect x="40.4170%" y="244" width="2.1580%" height="15" fill="rgb(231,57,52)" fg:x="2210" fg:w="118"/><text x="40.6670%" y="254.50">i..</text></g><g><title>ix_ (numpy\lib\index_tricks.py:105) (77 samples, 1.41%)</title><rect x="42.5750%" y="244" width="1.4082%" height="15" fill="rgb(248,177,22)" fg:x="2328" fg:w="77"/><text x="42.8250%" y="254.50"></text></g><g><title>ix_ (numpy\lib\index_tricks.py:106) (14 samples, 0.26%)</title><rect x="43.9832%" y="244" width="0.2560%" height="15" fill="rgb(215,211,37)" fg:x="2405" fg:w="14"/><text x="44.2332%" y="254.50"></text></g><g><title>ix_ (numpy\lib\index_tricks.py:95) (8 samples, 0.15%)</title><rect x="44.4404%" y="244" width="0.1463%" height="15" fill="rgb(241,128,51)" fg:x="2430" fg:w="8"/><text x="44.6904%" y="254.50"></text></g><g><title>ix_ (&lt;__array_function__ internals&gt;:200) (274 samples, 5.01%)</title><rect x="39.8135%" y="228" width="5.0110%" height="15" fill="rgb(227,165,31)" fg:x="2177" fg:w="274"/><text x="40.0635%" y="238.50">ix_ (&lt;..</text></g><g><title>ix_ (numpy\lib\index_tricks.py:96) (13 samples, 0.24%)</title><rect x="44.5867%" y="244" width="0.2377%" height="15" fill="rgb(228,167,24)" fg:x="2438" fg:w="13"/><text x="44.8367%" y="254.50"></text></g><g><title>merge_tables (Incorporate_into_hierarchical.py:287) (736 samples, 13.46%)</title><rect x="31.4009%" y="196" width="13.4601%" height="15" fill="rgb(228,143,12)" fg:x="1717" fg:w="736"/><text x="31.6509%" y="206.50">merge_tables (Incorp..</text></g><g><title>merge_by_clusters (Incorporate_into_hierarchical.py:223) (523 samples, 9.56%)</title><rect x="35.2963%" y="212" width="9.5647%" height="15" fill="rgb(249,149,8)" fg:x="1930" fg:w="523"/><text x="35.5463%" y="222.50">merge_by_clust..</text></g><g><title>compute_correlation (Correlation_utils.py:348) (804 samples, 14.70%)</title><rect x="30.2670%" y="180" width="14.7037%" height="15" fill="rgb(243,35,44)" fg:x="1655" fg:w="804"/><text x="30.5170%" y="190.50">compute_correlation (C..</text></g><g><title>merge_tables (Incorporate_into_hierarchical.py:289) (6 samples, 0.11%)</title><rect x="44.8610%" y="196" width="0.1097%" height="15" fill="rgb(246,89,9)" fg:x="2453" fg:w="6"/><text x="45.1110%" y="206.50"></text></g><g><title>compute_correlation (Correlation_utils.py:349) (11 samples, 0.20%)</title><rect x="44.9707%" y="180" width="0.2012%" height="15" fill="rgb(233,213,13)" fg:x="2459" fg:w="11"/><text x="45.2207%" y="190.50"></text></g><g><title>compute_expected_frequencies (Correlation_utils.py:162) (6 samples, 0.11%)</title><rect x="45.0622%" y="196" width="0.1097%" height="15" fill="rgb(233,141,41)" fg:x="2464" fg:w="6"/><text x="45.3122%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (6 samples, 0.11%)</title><rect x="45.0622%" y="212" width="0.1097%" height="15" fill="rgb(239,167,4)" fg:x="2464" fg:w="6"/><text x="45.3122%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (6 samples, 0.11%)</title><rect x="45.0622%" y="228" width="0.1097%" height="15" fill="rgb(209,217,16)" fg:x="2464" fg:w="6"/><text x="45.3122%" y="238.50"></text></g><g><title>compute_correlation (Correlation_utils.py:363) (7 samples, 0.13%)</title><rect x="45.3182%" y="180" width="0.1280%" height="15" fill="rgb(219,88,35)" fg:x="2478" fg:w="7"/><text x="45.5682%" y="190.50"></text></g><g><title>compute_correlation (Correlation_utils.py:411) (35 samples, 0.64%)</title><rect x="45.5011%" y="180" width="0.6401%" height="15" fill="rgb(220,193,23)" fg:x="2488" fg:w="35"/><text x="45.7511%" y="190.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:411) (35 samples, 0.64%)</title><rect x="45.5011%" y="196" width="0.6401%" height="15" fill="rgb(230,90,52)" fg:x="2488" fg:w="35"/><text x="45.7511%" y="206.50"></text></g><g><title>compute_correlation (Correlation_utils.py:419) (212 samples, 3.88%)</title><rect x="46.1595%" y="180" width="3.8771%" height="15" fill="rgb(252,106,19)" fg:x="2524" fg:w="212"/><text x="46.4095%" y="190.50">comp..</text></g><g><title>compute_correlation (Correlation_utils.py:420) (226 samples, 4.13%)</title><rect x="50.0366%" y="180" width="4.1331%" height="15" fill="rgb(206,74,20)" fg:x="2736" fg:w="226"/><text x="50.2866%" y="190.50">compu..</text></g><g><title>compute_correlation (Correlation_utils.py:421) (151 samples, 2.76%)</title><rect x="54.1697%" y="180" width="2.7615%" height="15" fill="rgb(230,138,44)" fg:x="2962" fg:w="151"/><text x="54.4197%" y="190.50">co..</text></g><g><title>compute_correlation (Correlation_utils.py:422) (810 samples, 14.81%)</title><rect x="56.9312%" y="180" width="14.8135%" height="15" fill="rgb(235,182,43)" fg:x="3113" fg:w="810"/><text x="57.1812%" y="190.50">compute_correlation (Co..</text></g><g><title>check_dependency_direction (Correlation_utils.py:261) (24 samples, 0.44%)</title><rect x="71.7813%" y="196" width="0.4389%" height="15" fill="rgb(242,16,51)" fg:x="3925" fg:w="24"/><text x="72.0313%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:261) (24 samples, 0.44%)</title><rect x="71.7813%" y="212" width="0.4389%" height="15" fill="rgb(248,9,4)" fg:x="3925" fg:w="24"/><text x="72.0313%" y="222.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:268) (65 samples, 1.19%)</title><rect x="72.2202%" y="212" width="1.1887%" height="15" fill="rgb(210,31,22)" fg:x="3949" fg:w="65"/><text x="72.4702%" y="222.50"></text></g><g><title>check_dependency_direction (Correlation_utils.py:267) (87 samples, 1.59%)</title><rect x="72.2202%" y="196" width="1.5911%" height="15" fill="rgb(239,54,39)" fg:x="3949" fg:w="87"/><text x="72.4702%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:270) (22 samples, 0.40%)</title><rect x="73.4089%" y="212" width="0.4023%" height="15" fill="rgb(230,99,41)" fg:x="4014" fg:w="22"/><text x="73.6589%" y="222.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:274) (30 samples, 0.55%)</title><rect x="73.8296%" y="212" width="0.5486%" height="15" fill="rgb(253,106,12)" fg:x="4037" fg:w="30"/><text x="74.0796%" y="222.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:275) (71 samples, 1.30%)</title><rect x="74.3782%" y="212" width="1.2985%" height="15" fill="rgb(213,46,41)" fg:x="4067" fg:w="71"/><text x="74.6282%" y="222.50"></text></g><g><title>check_dependency_direction (Correlation_utils.py:274) (121 samples, 2.21%)</title><rect x="73.8113%" y="196" width="2.2129%" height="15" fill="rgb(215,133,35)" fg:x="4036" fg:w="121"/><text x="74.0613%" y="206.50">c..</text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:277) (19 samples, 0.35%)</title><rect x="75.6767%" y="212" width="0.3475%" height="15" fill="rgb(213,28,5)" fg:x="4138" fg:w="19"/><text x="75.9267%" y="222.50"></text></g><g><title>check_dependency_direction (Correlation_utils.py:276) (14 samples, 0.26%)</title><rect x="76.0241%" y="196" width="0.2560%" height="15" fill="rgb(215,77,49)" fg:x="4157" fg:w="14"/><text x="76.2741%" y="206.50"></text></g><g><title>recursive_discover (SearchSpace_bit.py:143) (4,072 samples, 74.47%)</title><rect x="1.8288%" y="148" width="74.4696%" height="15" fill="rgb(248,100,22)" fg:x="100" fg:w="4072"/><text x="2.0788%" y="158.50">recursive_discover (SearchSpace_bit.py:143)</text></g><g><title>compute_correlation_with_cache (SearchSpace_bit.py:96) (4,072 samples, 74.47%)</title><rect x="1.8288%" y="164" width="74.4696%" height="15" fill="rgb(208,67,9)" fg:x="100" fg:w="4072"/><text x="2.0788%" y="174.50">compute_correlation_with_cache (SearchSpace_bit.py:96)</text></g><g><title>compute_correlation (Correlation_utils.py:455) (247 samples, 4.52%)</title><rect x="71.7813%" y="180" width="4.5172%" height="15" fill="rgb(219,133,21)" fg:x="3925" fg:w="247"/><text x="72.0313%" y="190.50">compu..</text></g><g><title>_cross_plis (Correlation_utils.py:247) (30 samples, 0.55%)</title><rect x="78.3102%" y="212" width="0.5486%" height="15" fill="rgb(246,46,29)" fg:x="4282" fg:w="30"/><text x="78.5602%" y="222.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:247) (12 samples, 0.22%)</title><rect x="78.6394%" y="228" width="0.2195%" height="15" fill="rgb(246,185,52)" fg:x="4300" fg:w="12"/><text x="78.8894%" y="238.50"></text></g><g><title>build_linked_table (Correlation_utils.py:54) (47 samples, 0.86%)</title><rect x="78.2004%" y="196" width="0.8595%" height="15" fill="rgb(252,136,11)" fg:x="4276" fg:w="47"/><text x="78.4504%" y="206.50"></text></g><g><title>_cross_plis (Correlation_utils.py:251) (6 samples, 0.11%)</title><rect x="78.9503%" y="212" width="0.1097%" height="15" fill="rgb(219,138,53)" fg:x="4317" fg:w="6"/><text x="79.2003%" y="222.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:251) (6 samples, 0.11%)</title><rect x="78.9503%" y="228" width="0.1097%" height="15" fill="rgb(211,51,23)" fg:x="4317" fg:w="6"/><text x="79.2003%" y="238.50"></text></g><g><title>build_linked_table (Correlation_utils.py:74) (89 samples, 1.63%)</title><rect x="79.2429%" y="196" width="1.6277%" height="15" fill="rgb(247,221,28)" fg:x="4333" fg:w="89"/><text x="79.4929%" y="206.50"></text></g><g><title>build_linked_table (Correlation_utils.py:79) (6 samples, 0.11%)</title><rect x="80.9985%" y="196" width="0.1097%" height="15" fill="rgb(251,222,45)" fg:x="4429" fg:w="6"/><text x="81.2485%" y="206.50"></text></g><g><title>build_linked_table (Correlation_utils.py:80) (74 samples, 1.35%)</title><rect x="81.1083%" y="196" width="1.3533%" height="15" fill="rgb(217,162,53)" fg:x="4435" fg:w="74"/><text x="81.3583%" y="206.50"></text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:80) (46 samples, 0.84%)</title><rect x="81.6203%" y="212" width="0.8413%" height="15" fill="rgb(229,93,14)" fg:x="4463" fg:w="46"/><text x="81.8703%" y="222.50"></text></g><g><title>compute_correlation (Correlation_utils.py:300) (630 samples, 11.52%)</title><rect x="77.6152%" y="180" width="11.5216%" height="15" fill="rgb(209,67,49)" fg:x="4244" fg:w="630"/><text x="77.8652%" y="190.50">compute_correlati..</text></g><g><title>build_linked_table (Correlation_utils.py:87) (361 samples, 6.60%)</title><rect x="82.5347%" y="196" width="6.6020%" height="15" fill="rgb(213,87,29)" fg:x="4513" fg:w="361"/><text x="82.7847%" y="206.50">build_lin..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:87) (289 samples, 5.29%)</title><rect x="83.8515%" y="212" width="5.2853%" height="15" fill="rgb(205,151,52)" fg:x="4585" fg:w="289"/><text x="84.1015%" y="222.50">&lt;listc..</text></g><g><title>compute_expected_frequencies (Correlation_utils.py:157) (23 samples, 0.42%)</title><rect x="89.1368%" y="196" width="0.4206%" height="15" fill="rgb(253,215,39)" fg:x="4874" fg:w="23"/><text x="89.3868%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:157) (23 samples, 0.42%)</title><rect x="89.1368%" y="212" width="0.4206%" height="15" fill="rgb(221,220,41)" fg:x="4874" fg:w="23"/><text x="89.3868%" y="222.50"></text></g><g><title>compute_expected_frequencies (Correlation_utils.py:158) (67 samples, 1.23%)</title><rect x="89.5574%" y="196" width="1.2253%" height="15" fill="rgb(218,133,21)" fg:x="4897" fg:w="67"/><text x="89.8074%" y="206.50"></text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:158) (54 samples, 0.99%)</title><rect x="89.7952%" y="212" width="0.9876%" height="15" fill="rgb(221,193,43)" fg:x="4910" fg:w="54"/><text x="90.0452%" y="222.50"></text></g><g><title>compute_correlation (Correlation_utils.py:306) (458 samples, 8.38%)</title><rect x="89.1368%" y="180" width="8.3760%" height="15" fill="rgb(240,128,52)" fg:x="4874" fg:w="458"/><text x="89.3868%" y="190.50">compute_corr..</text></g><g><title>compute_expected_frequencies (Correlation_utils.py:162) (368 samples, 6.73%)</title><rect x="90.7827%" y="196" width="6.7301%" height="15" fill="rgb(253,114,12)" fg:x="4964" fg:w="368"/><text x="91.0327%" y="206.50">compute_e..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (368 samples, 6.73%)</title><rect x="90.7827%" y="212" width="6.7301%" height="15" fill="rgb(215,223,47)" fg:x="4964" fg:w="368"/><text x="91.0327%" y="222.50">&lt;listcomp..</text></g><g><title>&lt;listcomp&gt; (Correlation_utils.py:163) (363 samples, 6.64%)</title><rect x="90.8742%" y="228" width="6.6386%" height="15" fill="rgb(248,225,23)" fg:x="4969" fg:w="363"/><text x="91.1242%" y="238.50">&lt;listcomp..</text></g><g><title>compute_correlation (Correlation_utils.py:308) (129 samples, 2.36%)</title><rect x="97.5128%" y="180" width="2.3592%" height="15" fill="rgb(250,108,0)" fg:x="5332" fg:w="129"/><text x="97.7628%" y="190.50">c..</text></g><g><title>_check_expected_frequencies (Correlation_utils.py:175) (129 samples, 2.36%)</title><rect x="97.5128%" y="196" width="2.3592%" height="15" fill="rgb(228,208,7)" fg:x="5332" fg:w="129"/><text x="97.7628%" y="206.50">_..</text></g><g><title>&lt;genexpr&gt; (Correlation_utils.py:175) (129 samples, 2.36%)</title><rect x="97.5128%" y="212" width="2.3592%" height="15" fill="rgb(244,45,10)" fg:x="5332" fg:w="129"/><text x="97.7628%" y="222.50">&lt;..</text></g><g><title>all (5,468 samples, 100%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="5468"/><text x="0.2500%" y="62.50"></text></g><g><title>&lt;module&gt; (Config.py:78) (5,411 samples, 98.96%)</title><rect x="1.0424%" y="68" width="98.9576%" height="15" fill="rgb(210,195,18)" fg:x="57" fg:w="5411"/><text x="1.2924%" y="78.50">&lt;module&gt; (Config.py:78)</text></g><g><title>execute (Cafd.py:94) (5,369 samples, 98.19%)</title><rect x="1.8105%" y="84" width="98.1895%" height="15" fill="rgb(249,80,12)" fg:x="99" fg:w="5369"/><text x="2.0605%" y="94.50">execute (Cafd.py:94)</text></g><g><title>run_worker_sequential (Cafd.py:36) (5,369 samples, 98.19%)</title><rect x="1.8105%" y="100" width="98.1895%" height="15" fill="rgb(221,65,9)" fg:x="99" fg:w="5369"/><text x="2.0605%" y="110.50">run_worker_sequential (Cafd.py:36)</text></g><g><title>process_search_space (Cafd.py:19) (5,368 samples, 98.17%)</title><rect x="1.8288%" y="116" width="98.1712%" height="15" fill="rgb(235,49,36)" fg:x="100" fg:w="5368"/><text x="2.0788%" y="126.50">process_search_space (Cafd.py:19)</text></g><g><title>discover (SearchSpace_bit.py:200) (5,368 samples, 98.17%)</title><rect x="1.8288%" y="132" width="98.1712%" height="15" fill="rgb(225,32,20)" fg:x="100" fg:w="5368"/><text x="2.0788%" y="142.50">discover (SearchSpace_bit.py:200)</text></g><g><title>recursive_discover (SearchSpace_bit.py:187) (1,296 samples, 23.70%)</title><rect x="76.2985%" y="148" width="23.7015%" height="15" fill="rgb(215,141,46)" fg:x="4172" fg:w="1296"/><text x="76.5485%" y="158.50">recursive_discover (SearchSpace_bit.py..</text></g><g><title>recursive_discover (SearchSpace_bit.py:145) (1,295 samples, 23.68%)</title><rect x="76.3168%" y="164" width="23.6832%" height="15" fill="rgb(250,160,47)" fg:x="4173" fg:w="1295"/><text x="76.5668%" y="174.50">recursive_discover (SearchSpace_bit.py..</text></g></svg></svg>